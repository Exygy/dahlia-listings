ShortFormApplicationService = ($localStorage, $translate, $http) ->
  Service = {}
  Service.form = {}
  Service.applicationDefaults =
    applicant:
      home_address: { address1: null, city: null, state: null, zip: null }
      language: "English"
      phone: null
      mailing_address: { address1: null, city: null, state: null, zip: null }
    alternateContact:
      language: "English"
    householdMembers: []
    preferences:
      liveInSf: null
      workInSf: null
    householdIncome: { incomeTotal: 0, incomeTimeframe: 'per_year' }
    completedSections:
      Intro: false
      You: false
      Household: false
      Status: false
      Income: false
    # as you proceed through each page, validatedForms will store:
    #  [pagename]: T/F
    # to indicate if that form was left valid or invalid
    validatedForms:
      You: {}
      Household: {}
      Status: {}
      Income: {}
      Review: {}

  Service.current_id = 0

  Service.resetUserData = () ->
    Service.application = angular.copy(Service.applicationDefaults)
    Service.applicant = Service.application.applicant
    Service.alternateContact = Service.application.alternateContact
    Service.householdMember = {}
    Service.householdMembers = Service.application.householdMembers

  # even though this looks commented out, it still has an effect in ERB land
  # <% if Rails.env.development? %> # -------------
  $localStorage.application ?= Service.applicationDefaults
  Service.application = $localStorage.application
  Service.applicant = Service.application.applicant
  Service.preferences = Service.application.preferences
  Service.alternateContact = Service.application.alternateContact
  Service.householdMember = {}
  Service.householdMembers = Service.application.householdMembers
  # <% else %> # -------------
  # initialize the user application data
  Service.resetUserData()
  # <% end %> # -------------

  Service.completeSection = (section) ->
    Service.application.completedSections[section] = true

  Service.userCanAccessSection = (name, state = null) ->
    # user can't access later sections yet when on the welcome page
    return false if state and Service.isWelcomePage(state)
    completed = Service.application.completedSections
    validated = Service.application.validatedForms
    switch name
      when 'You'
        true
      when 'Household'
        completed.Intro &&
        completed.You &&
        # make sure all validatedForms in previous section == true
        _.every(validated['You'], (i) -> i)
      when 'Status'
        Service.userCanAccessSection('Household') &&
        completed.Household &&
        # make sure all validatedForms in previous section == true
        _.every(validated['Household'], (i) -> i)
      when 'Income'
        Service.userCanAccessSection('Status') &&
        completed.Status &&
        # make sure all validatedForms in previous section == true
        _.every(validated['Status'], (i) -> i)
      when 'Review'
        Service.userCanAccessSection('Income') &&
        completed.Income &&
        # make sure all validatedForms in previous section == true
        _.every(validated['Income'], (i) -> i)
      else
        false

  Service.copyHomeToMailingAddress = () ->
    angular.copy(Service.applicant.home_address, Service.applicant.mailing_address)

  Service.validMailingAddress = () ->
    !! (Service.applicant.mailing_address.address1 &&
        Service.applicant.mailing_address.city &&
        Service.applicant.mailing_address.state &&
        Service.applicant.mailing_address.zip)

  Service.missingPrimaryContactInfo = () ->
    missingInfo = []
    if !Service.applicant.phone
      missingInfo.push("Phone")
    if !Service.applicant.email
      missingInfo.push("Email")
    if !Service.validMailingAddress()
      missingInfo.push("Address")
    return missingInfo

  Service.clearAlternatePhoneData = ->
    Service.applicant.noPhone = false
    if Service.applicant.additionalPhone
      Service.applicant.alternatePhone = null
      Service.applicant.alternatePhoneType = null

  Service.clearAlternateContactDetails = ->
    clearedData = { alternateContactType: 'None' }
    angular.copy(clearedData, Service.application.alternateContact)

  Service._nextId = ->
    if Service.householdMembers.length > 0
      max_id = _.maxBy(Service.householdMembers, 'id').id
    else
      max_id = Service.current_id
    Service.current_id = max_id + 1

  Service.addHouseholdMember = (householdMember) ->
    if !householdMember.id
      householdMember.id = Service._nextId()
      Service.householdMembers.push(angular.copy(householdMember))
    else
      # update existing householdMember
      angular.copy(householdMember, Service.householdMember)
    Service.householdMember = {}

  Service.resetHouseholdmember = () ->
    Service.householdMember = {}

  Service.getHouseholdMember = (id) ->
    Service.householdMember = _.find(Service.householdMembers, {id: parseInt(id)})

  Service.cancelHouseholdMember = ->
    householdMembers = Service.householdMembers.filter (m) ->
      (m != Service.householdMember && m.id != Service.householdMember.id)
    # clear out preferences where this householdMember was selected
    full_name = "#{Service.householdMember.firstName} #{Service.householdMember.lastName}"
    # search through all xxx_household_member items in preferences matching the full name
    _.each Service.application.preferences, (v,k) ->
      if k.indexOf('_household_member') > 0 and v == full_name
        preference = k.split('_household_member')[0]
        Service.application.preferences[preference] = false
        Service.application.preferences[k] = null
        if Service.application.preferences["#{preference}_proof_option"]
          Service.application.preferences["#{preference}_proof_option"] = null
        if Service.application.preferences["#{preference}_proof_file"]
          Service.application.preferences["#{preference}_proof_file"] = null

    # persist the changes to Service.householdMembers / $localStorage
    Service.householdMember = {}
    angular.copy(householdMembers, Service.householdMembers)

  Service.checkHouseholdEligiblity = (listing) ->
    params =
      listing_id: listing.Id,
      eligibility:
        householdsize: Service.application.householdMembers.length + 1
        incomelevel: Service._calculateHouseholdIncome()
    $http.post("/api/v1/validate-household", params).success((data, status, headers, config) ->
      data
    ).error( (data, status, headers, config) ->
      return
    )

  Service._calculateHouseholdIncome = () ->
    income = Service.application.householdIncome
    if income.incomeTimeframe == 'per_year'
      income.incomeTotal
    else if income.incomeTimeframe == 'per_month'
      income.incomeTotal * 12

  Service.resetGenderOptions = (user, option) ->
    toggle = !user.gender[option]
    user.gender = {}
    user.genderOther = null
    user.gender[option] = toggle

  ### Proof of Preferences ###

  Service.refreshLiveWorkPreferences = () ->
    Service._updatePreference("liveInSf", Service.liveInSfMembers())
    Service._updatePreference("workInSf", Service.workInSfMembers())

  Service.liveInSfMembers = () ->
    applicantLivesInSf = _.lowerCase(Service.applicant.home_address.city) == 'san francisco'
    liveInSfMembers = Service.application.householdMembers.filter (member) ->
      if member.hasSameAddressAsApplicant == "No"
        _.lowerCase(member.home_address.city) == 'san francisco'
      else
        member.hasSameAddressAsApplicant == "Yes" && applicantLivesInSf
    liveInSfMembers.push(Service.applicant) if applicantLivesInSf
    return liveInSfMembers

  Service.workInSfMembers = () ->
    workInSfMembers = Service.application.householdMembers.filter (member) ->
      member.workInSf == "Yes"
    applicantWorksInSf = Service.applicant.workInSf == "Yes"
    workInSfMembers.push(Service.applicant) if applicantWorksInSf
    return workInSfMembers

  Service._updatePreference = (preference, eligibleMembers) ->
    # only need to update if nobody is eligible
    Service.preferences[preference] = false if _.isEmpty(eligibleMembers)

  Service.onExit = (e) ->
    e.returnValue = $translate.instant('T.ARE_YOU_SURE_YOU_WANT_TO_LEAVE')

  Service.isWelcomePage = (state) ->
    !!state.name.match(/short-form-welcome\./)

  Service.isShortFormPage = (state) ->
    !!state.name.match(/short-form-application\.|create-account/)

  Service.checkFormState = (stateName, section) ->
    if Service.form.applicationForm
      stateName = stateName.replace(/dahlia.short-form-(welcome|application)\./, "")
      # special case for household-member-form
      return if stateName.match(/household-member-form/)
      Service.application.validatedForms[section.name][stateName] = Service.form.applicationForm.$valid

  Service.authorizedToProceed = (toState, fromState, toSection) ->
    return true unless toState && fromState
    return false unless Service.userCanAccessSection(toSection.name)
    # they're "jumping ahead" if they're not coming from a short form page or create-account
    # and they're trying to go to a short form section ahead of "name" (1st page)
    jumpAhead = Service.isShortFormPage(toState) &&
                !Service.isShortFormPage(fromState) &&
                toState.name != 'dahlia.short-form-application.name'
    return !jumpAhead


  Service.isLeavingShortForm = (toState, fromState) ->
    # leaving means we're going from short form to a non-short form page
    Service.isShortFormPage(fromState) && !Service.isShortFormPage(toState)

  return Service

############################################################################################
######################################## CONFIG ############################################
############################################################################################

ShortFormApplicationService.$inject = ['$localStorage', '$translate', '$http']

angular
  .module('dahlia.services')
  .service('ShortFormApplicationService', ShortFormApplicationService)
