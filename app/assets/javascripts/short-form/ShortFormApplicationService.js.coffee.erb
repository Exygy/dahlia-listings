ShortFormApplicationService = (
  $translate, $http, uuid,
  ListingService, ShortFormDataService, AddressValidationService, GeocodingService,
  AnalyticsService
) ->
  Service = {}
  Service.listing = ListingService.listing
  Service.form = {}
  Service.accountApplication = {}
  Service.application = {}
  Service.applicationDefaults =
    id: null
    lotteryNumber: null
    status: 'draft'
    applicationSubmittedDate: null
    surveyComplete: false
    applicationSubmissionType: "Electronic"
    applicant:
      home_address: { address1: null, address2: "", city: null, state: null, zip: null }
      phone: null
      mailing_address: { address1: null, address2: "", city: null, state: null, zip: null }
      terms: {}
    alternateContact:
      mailing_address: { address1: null, address2: "", city: null, state: null, zip: null }
    householdMembers: []
    preferences:
      liveInSf: null
      workInSf: null
      liveWorkInSf: null
      neighborhoodResidence: null
    householdIncome: { incomeTotal: null, incomeTimeframe: 'per_year' }
    completedSections:
      Intro: false
      You: false
      Household: false
      Preferences: false
      Income: false
    # as you proceed through each page, validatedForms will store:
    #  [pagename]: T/F
    # to indicate if that form was left valid or invalid
    validatedForms:
      You: {}
      Household: {}
      Preferences: {}
      Income: {}
      Review: {}

  Service.current_id = 0
  Service.session_uid = "#{uuid.v4()}-#{uuid.v4()}"

  Service.resetUserData = (data = {}) ->
    application = _.merge({}, Service.applicationDefaults, data)
    angular.copy(application, Service.application)
    Service.applicant = Service.application.applicant
    Service.preferences = Service.application.preferences
    Service.alternateContact = Service.application.alternateContact
    Service.householdMember = {}
    Service.householdMembers = Service.application.householdMembers

  Service.resetUserData()

  Service.completeSection = (section) ->
    Service.application.completedSections[section] = true

  Service.userCanAccessSection = (name, state = null) ->
    # user can't access later sections yet when on the welcome page
    if state and (Service.isWelcomePage(state))
      return false

    completed = Service.application.completedSections
    validated = Service.application.validatedForms
    switch name
      when 'You'
        true
      when 'Household'
        completed.Intro &&
        completed.You &&
        # make sure all validatedForms in previous section == true
        _.every(validated['You'], (i) -> i)
      when 'Preferences'
        Service.userCanAccessSection('Household') &&
        completed.Household &&
        # make sure all validatedForms in previous section == true
        _.every(validated['Household'], (i) -> i)
      when 'Income'
        Service.userCanAccessSection('Preferences') &&
        completed.Preferences &&
        # make sure all validatedForms in previous section == true
        _.every(validated['Preferences'], (i) -> i)
      when 'Review'
        Service.userCanAccessSection('Income') &&
        completed.Income &&
        # make sure all validatedForms in previous section == true
        _.every(validated['Income'], (i) -> i)
      else
        false

  Service.copyHomeToMailingAddress = () ->
    unless Service.applicant.hasAltMailingAddress
      angular.copy(Service.applicant.home_address, Service.applicant.mailing_address)

  Service.validMailingAddress = () ->
    !! (Service.applicant.mailing_address.address1 &&
        Service.applicant.mailing_address.city &&
        Service.applicant.mailing_address.state &&
        Service.applicant.mailing_address.zip)

  Service.clearPhoneData = (type) ->
    if type == 'alternate'
      Service.applicant.noPhone = false
      Service.applicant.alternatePhone = null
      Service.applicant.alternatePhoneType = null
    else if type == 'phone'
      Service.applicant.additionalPhone = false
      Service.applicant.phone = null
      Service.applicant.phoneType = null

  Service.clearAlternateContactDetails = ->
    clearedData = { alternateContactType: 'None' }
    validated = Service.application.validatedForms.You
    delete validated['alternate-contact-name']
    delete validated['alternate-contact-phone-address']
    angular.copy(clearedData, Service.application.alternateContact)

  Service._nextId = ->
    if Service.householdMembers.length > 0
      max_id = _.maxBy(Service.householdMembers, 'id').id
    else
      max_id = Service.current_id
    Service.current_id = max_id + 1

  Service.addHouseholdMember = (householdMember) ->
    if householdMember.hasSameAddressAsApplicant == 'Yes'
      # copy applicant's neighborhoodPreferenceMatch to householdMember
      householdMember.neighborhoodPreferenceMatch = Service.applicant.neighborhoodPreferenceMatch
    if !householdMember.id
      householdMember.id = Service._nextId()
      Service.householdMembers.push(angular.copy(householdMember))
    else
      # search through all xxx_household_member items in preferences matching the full name
      full_name = "#{Service.householdMember.firstName} #{Service.householdMember.lastName}"
      _.each Service.preferences, (v,k) ->
        if k.indexOf('_household_member') > 0 and v == full_name
          # update the name of the preference to the new name
          new_full_name = "#{householdMember.firstName} #{householdMember.lastName}"
          Service.preferences[k] = new_full_name
      # update existing householdMember
      householdMemberToUpdate = _.find(Service.householdMembers, {id: householdMember.id})
      angular.copy(householdMember, householdMemberToUpdate)
    Service.invalidateHouseholdForm()

  Service.resetHouseholdMember = () ->
    angular.copy({}, Service.householdMember)

  Service.getHouseholdMember = (id) ->
    angular.copy(_.find(Service.householdMembers, {id: parseInt(id)}), Service.householdMember)

  Service.cancelHouseholdMember = ->
    # list of all householdMembers minus the cancelled one
    householdMembers = Service.householdMembers.filter (m) ->
      (m != Service.householdMember && m.id != Service.householdMember.id)
    # clear out preferences where this householdMember was selected
    full_name = "#{Service.householdMember.firstName} #{Service.householdMember.lastName}"
    # search through all xxx_household_member items in preferences matching the full name
    _.each Service.preferences, (v,k) ->
      if k.indexOf('_household_member') > 0 and v == full_name
        preference = k.split('_household_member')[0]
        Service.cancelPreference(preference)

    # persist the changes to Service.householdMembers
    Service.resetHouseholdMember()
    angular.copy(householdMembers, Service.householdMembers)
    Service.invalidateHouseholdForm()

  Service.copyNeighborhoodMatchToHousehold = ->
    Service.householdMembers.forEach( (member) ->
      if member.hasSameAddressAsApplicant == 'Yes'
        # copy applicant's neighborhoodPreferenceMatch to householdMember
        member.neighborhoodPreferenceMatch = Service.applicant.neighborhoodPreferenceMatch
    )

  Service.cancelPreference = (preference) ->
    Service.preferences[preference] = null
    Service.preferences["#{preference}_household_member"] = null
    Service.preferences["#{preference}_proof_option"] = null
    Service.preferences["#{preference}_proof_file"] = null

  Service.checkHouseholdEligiblity = (listing) ->
    params =
      listing_id: listing.Id,
      eligibility:
        householdsize: Service.application.householdMembers.length + 1
        incomelevel: Service._calculateHouseholdIncome()
        childrenUnder6: Service._childrenUnder6()
    $http.post("/api/v1/short-form/validate-household", params).success((data, status, headers, config) ->
      data
    ).error( (data, status, headers, config) ->
      return
    )

  Service._childrenUnder6 = ->
    allMembers = angular.copy(Service.application.householdMembers)
    allMembers.push(Service.applicant)
    _.reduce(allMembers, (count, member) ->
      dob = "#{member.dob_year}-#{member.dob_month}-#{member.dob_day}"
      dob = moment(dob, 'YYYY-MM-DD')
      age = moment().diff(dob, 'years')
      count + (if age < 6 then 1 else 0)
    , 0)

  Service._calculateHouseholdIncome = () ->
    income = Service.application.householdIncome || 0
    if income.incomeTimeframe == 'per_year'
      income.incomeTotal
    else if income.incomeTimeframe == 'per_month'
      income.incomeTotal * 12

  ### Proof of Preferences ###
  Service.refreshPreferences = () ->
    Service._updatePreference("liveInSf", Service.liveInSfMembers())
    Service._updatePreference("workInSf", Service.workInSfMembers())
    Service._updatePreference("neighborhoodResidence", Service.neighborhoodResidenceMembers())

  Service.liveInSfMembers = () ->
    applicantLivesInSf = _.lowerCase(Service.applicant.home_address.city) == 'san francisco'
    # no address also counts as "live in SF" to consider homelessness
    applicantLivesInSf ||= Service.applicant.noAddress
    liveInSfMembers = Service.application.householdMembers.filter (member) ->
      if member.hasSameAddressAsApplicant == 'No'
        _.lowerCase(member.home_address.city) == 'san francisco'
      else
        member.hasSameAddressAsApplicant == 'Yes' && applicantLivesInSf
    liveInSfMembers.unshift(Service.applicant) if applicantLivesInSf
    return liveInSfMembers

  Service.workInSfMembers = () ->
    workInSfMembers = Service.application.householdMembers.filter (member) ->
      member.workInSf == 'Yes'
    applicantWorksInSf = Service.applicant.workInSf == 'Yes'
    workInSfMembers.unshift(Service.applicant) if applicantWorksInSf
    return workInSfMembers

  Service.neighborhoodResidenceMembers = () ->
    # find all household members that match
    household = Service.application.householdMembers.filter (member) ->
      member.neighborhoodPreferenceMatch == 'Matched'
    # add applicant to the list if they match
    if Service.applicant.neighborhoodPreferenceMatch == 'Matched'
      household.unshift(Service.applicant)
    household

  Service.preferencesApplyForHousehold = ->
    liveInSfEligible = Service.liveInSfMembers().length > 0
    workInSfEligible = Service.workInSfMembers().length > 0
    neighborhoodResidenceEligible =  Service.neighborhoodResidenceMembers().length > 0
    displacedOrCertOfPreference = Service.preferences.displaced || Service.preferences.certOfPreference
    return (liveInSfEligible || workInSfEligible || neighborhoodResidenceEligible || displacedOrCertOfPreference)

  Service._updatePreference = (preference, eligibleMembers) ->
    members = eligibleMembers.map (member) -> "#{member.firstName} #{member.lastName}"
    selectedMember = Service.preferences[preference + '_household_member']
    # only need to clear if nobody is eligible or if selected householdMember is no longer eligible
    if _.isEmpty(members) || !_.includes(members, selectedMember)
      Service.cancelPreference(preference)

  Service.onExit = (e) ->
    AnalyticsService.trackFormAbandon('Application')
    e.returnValue = $translate.instant('T.ARE_YOU_SURE_YOU_WANT_TO_LEAVE')

  Service.isWelcomePage = (state) ->
    !!state.name.match(/short-form-welcome\./)

  Service._isPrimaryOrHouseholdAddressPage = (state) ->
    stateName = state.name.replace(/dahlia.short-form-(welcome|application)\./, "")
    stateName.match(/contact/) || stateName.match(/household-member-form/)

  Service.isShortFormPage = (state) ->
    !!state.name.match(/short-form-application\./)

  Service.checkFormState = (stateName, section) ->
    if Service.form.applicationForm
      stateName = stateName.replace(/dahlia.short-form-(welcome|application)\./, "")
      # special case for household-member-form
      return if stateName.match(/household-member-form/)
      isValid = Service.form.applicationForm.$valid
      # special case for contact form
      if stateName.match(/contact/)
        applicant = Service.applicant
        addressValid = !!applicant.neighborhoodPreferenceMatch || !!applicant.noAddress
        isValid = isValid && addressValid
      Service.application.validatedForms[section.name][stateName] = isValid

  Service.authorizedToProceed = (toState, fromState, toSection) ->
    return true unless toState && fromState
    return false unless Service.userCanAccessSection(toSection.name)
    # they're "jumping ahead" if they're not coming from a short form page or create-account
    # and they're trying to go to a short form section ahead of "name" (1st page)
    jumpAhead = Service.isShortFormPage(toState) &&
                !Service.isShortFormPage(fromState) &&
                toState.name != 'dahlia.short-form-application.name'
    return !jumpAhead

  Service.isLeavingShortForm = (toState, fromState) ->
    Service.isShortFormPage(fromState) && !Service.isShortFormPage(toState)

  Service.isLeavingConfirmationToSignIn = (toState, fromState) ->
    fromState.name == 'dahlia.short-form-application.create-account' &&
      toState.name == 'dahlia.sign-in' &&
      Service.application.status == 'submitted'

  Service.hittingBackFromConfirmation = (fromState, toState) ->
    # going from confirmation to a short form page that ISN'T "create-account" or "review"
    fromState.name == 'dahlia.short-form-application.confirmation' &&
      toState.name != 'dahlia.short-form-application.review-submitted' &&
      toState.name != 'dahlia.short-form-application.create-account' &&
      Service.isShortFormPage(toState)

  Service.invalidateNameForm = ->
    Service.application.validatedForms['You']['name'] = false

  Service.invalidateContactForm = ->
    Service.application.validatedForms['You']['contact'] = false

  Service.invalidateAltContactTypeForm = ->
    Service.application.validatedForms['You']['alternate-contact-type'] = false

  Service.invalidateIncomeForm = ->
    Service.application.completedSections['Income'] = false
    Service.application.validatedForms['Income']['income'] = false

  Service.invalidateHouseholdForm = ->
    Service.application.completedSections['Household'] = false
    Service.application.completedSections['Preferences'] = false
    Service.application.completedSections['Income'] = false

  Service.preferenceFileIsLoading = (fileType) ->
    !! Service.preferences["#{fileType}_loading"]

  Service.submitApplication = (options={}) ->
    if options.finish
      Service.application.status = 'submitted'

    Service.application.applicationSubmittedDate = moment().format('YYYY-MM-DD')
    params =
      application: ShortFormDataService.formatApplication(Service.listing.Id, Service.application)
      uploaded_file:
        session_uid: Service.session_uid
    if options.attachToAccount
      params.temp_session_id = Service.session_uid

    if params.application.id
      # update
      id = params.application.id
      if options.attachToAccount
        appSubmission = $http.put("/api/v1/short-form/claim-application/#{id}", params)
      else
        appSubmission = $http.put("/api/v1/short-form/application/#{id}", params)
    else
      # create
      appSubmission = $http.post('/api/v1/short-form/application', params)

    appSubmission.success((data, status, headers, config) ->
      if data.lotteryNumber
        Service.application.lotteryNumber = data.lotteryNumber
        Service.application.id = data.id
    ).error( (data, status, headers, config) ->
      alert("Error with submission: #{data.error}")
      return
    )

  Service.deleteApplication = (id) ->
    $http.delete("/api/v1/short-form/application/#{id}").success((data, status) ->
      true
    ).error( (data, status) ->
      alert("Error deleting application.")
      return
    )

  Service.getApplication = (id) ->
    $http.get("/api/v1/short-form/application/#{id}").success((data, status) ->
      Service.loadApplication(data)
    ).error((data, status) ->
      return
    )

  Service.getMyApplicationForListing = (listing_id) ->
    $http.get("/api/v1/short-form/listing-application/#{listing_id}").success((data, status) ->
      Service.loadApplication(data)
    ).error((data, status) ->
      return
    )

  Service.getMyAccountApplication = ->
    $http.get("/api/v1/short-form/listing-application/#{Service.listing.Id}").success((data, status) ->
      Service.loadAccountApplication(data)
    ).error((data, status) ->
      return
    )

  Service.keepCurrentDraftApplication = (loggedInUser) ->
    Service.importUserData(loggedInUser)
    Service.application.id = Service.accountApplication.id
    # now that we've overridden current application ID with our old one
    # submitApplication() will update our existing draft on salesforce
    Service.submitApplication()

  Service.loadApplication = (data) ->
    formattedApp = {}
    if data.application && !_.isEmpty(data.application)
      files = data.files || []
      formattedApp = ShortFormDataService.reformatApplication(data.application, files)
    Service.resetUserData(formattedApp)

  Service.loadAccountApplication = (data) ->
    return false if _.isEmpty(data.application)
    formattedApp = ShortFormDataService.reformatApplication(data.application)
    angular.copy(formattedApp, Service.accountApplication)

  Service.checkSurveyComplete = ->
    app = Service.applicant
    responses = [
      _.some(app.gender),
      app.ethnicity,
      app.race,
      _.some(app.referral),
    ]
    Service.application.surveyComplete = _.every(responses)

  Service.importUserData = (loggedInUser) ->
    fields = [
      'email', 'firstName', 'middleName', 'lastName', 'dob_day', 'dob_year', 'dob_month'
    ]
    # copy over all non-blank values e.g. omit middleName if null
    userData = _.omitBy(_.pick(loggedInUser, fields), _.isNil)
    original = angular.copy(Service.applicant)
    # merge the data into applicant
    _.merge Service.applicant, userData
    changed = !_.isEqual(Service.applicant, original)
    # return T/F if data was changed or not
    return changed


  ####### Address validation functions
  Service.validateApplicantAddress = (callback) ->
    # validate + geocode address
    # errors are handled in the controller
    AddressValidationService.validate(
      address: Service.applicant.home_address
      type: 'home'
    ).success( ->
      Service.copyHomeToMailingAddress()
      GeocodingService.geocode(
        address: Service.applicant.home_address
        member: Service.applicant
        applicant: Service.applicant
        listing: Service.listing
      ).success( ->
        Service.applicant.neighborhoodPreferenceMatch = GeocodingService.neighborhoodPreferenceMatch
        Service.copyNeighborhoodMatchToHousehold()
        callback()
      )
    )

  Service.validateHouseholdMemberAddress = (callback) ->
    # validate + geocode address
    # errors are handled in the controller
    AddressValidationService.validate(
      address: Service.householdMember.home_address
      type: 'home'
    ).success( ->
      GeocodingService.geocode(
        address: Service.householdMember.home_address
        member: Service.householdMember
        applicant: Service.applicant
        listing: Service.listing
      ).success( ->
        Service.householdMember.neighborhoodPreferenceMatch = GeocodingService.neighborhoodPreferenceMatch
        Service.addHouseholdMember(Service.householdMember)
        callback()
      )
    )

  Service.DOBValid = ShortFormDataService.DOBValid

  # TODO: -- REMOVE HARDCODED FEATURES --
  Service.listingIs = ListingService.listingIs

  return Service

############################################################################################
######################################## CONFIG ############################################
############################################################################################

ShortFormApplicationService.$inject = [
  '$translate', '$http', 'uuid',
  'ListingService', 'ShortFormDataService',
  'AddressValidationService', 'GeocodingService',
  'AnalyticsService'
]

angular
  .module('dahlia.services')
  .service('ShortFormApplicationService', ShortFormApplicationService)
