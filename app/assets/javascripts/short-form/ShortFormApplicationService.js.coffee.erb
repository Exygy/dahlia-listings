ShortFormApplicationService = ($translate, $http, Upload, uuid, ListingService, ShortFormDataService) ->
  Service = {}
  Service.listing = ListingService.listing
  Service.form = {}
  Service.application = {}
  Service.applicationDefaults =
    id: null
    lotteryNumber: null
    status: null
    applicationSubmittedDate: null
    surveyComplete: false
    applicationSubmissionType: "Electronic"
    applicant:
      home_address: { address1: null, address2: "", city: null, state: null, zip: null }
      language: "English"
      phone: null
      mailing_address: { address1: null, address2: "", city: null, state: null, zip: null }
      gender: {}
      terms: {}
    alternateContact:
      language: "English"
      mailing_address: { address1: null, address2: "", city: null, state: null, zip: null }
    householdMembers: []
    preferences:
      liveInSf: null
      workInSf: null
      neighborhoodResidence: null
      liveInSf_file: null
      workInSf_file: null
      neighborhoodResidence_file: null
      liveInSf_file_loading: null
      workInSf_file_loading: null
      neighborhoodResidence_file_loading: null
      liveInSf_file_error: null
      workInSf_file_error: null
      neighborhoodResidence_file_error: null
    householdIncome: { incomeTotal: 0, incomeTimeframe: 'per_year' }
    completedSections:
      Intro: false
      You: false
      Household: false
      Status: false
      Income: false
    # as you proceed through each page, validatedForms will store:
    #  [pagename]: T/F
    # to indicate if that form was left valid or invalid
    validatedForms:
      You: {}
      Household: {}
      Status: {}
      Income: {}
      Review: {}

  Service.current_id = 0
  Service.session_uid = "#{uuid.v4()}-#{uuid.v4()}"

  Service.resetUserData = (data = {}) ->
    application = _.merge({}, Service.applicationDefaults, data)
    angular.copy(application, Service.application)
    Service.applicant = Service.application.applicant
    Service.preferences = Service.application.preferences
    Service.alternateContact = Service.application.alternateContact
    Service.householdMember = {}
    Service.householdMembers = Service.application.householdMembers

  Service.resetUserData()

  Service.completeSection = (section) ->
    Service.application.completedSections[section] = true

  Service.userCanAccessSection = (name, state = null) ->
    # user can't access later sections yet when on the welcome page
    return false if state and Service.isWelcomePage(state)
    completed = Service.application.completedSections
    validated = Service.application.validatedForms
    switch name
      when 'You'
        true
      when 'Household'
        completed.Intro &&
        completed.You &&
        # make sure all validatedForms in previous section == true
        _.every(validated['You'], (i) -> i)
      when 'Status'
        Service.userCanAccessSection('Household') &&
        completed.Household &&
        # make sure all validatedForms in previous section == true
        _.every(validated['Household'], (i) -> i)
      when 'Income'
        Service.userCanAccessSection('Status') &&
        completed.Status &&
        # make sure all validatedForms in previous section == true
        _.every(validated['Status'], (i) -> i)
      when 'Review'
        Service.userCanAccessSection('Income') &&
        completed.Income &&
        # make sure all validatedForms in previous section == true
        _.every(validated['Income'], (i) -> i)
      else
        false

  Service.copyHomeToMailingAddress = () ->
    unless Service.applicant.hasAltMailingAddress
      angular.copy(Service.applicant.home_address, Service.applicant.mailing_address)

  Service.validMailingAddress = () ->
    !! (Service.applicant.mailing_address.address1 &&
        Service.applicant.mailing_address.city &&
        Service.applicant.mailing_address.state &&
        Service.applicant.mailing_address.zip)

  Service.missingPrimaryContactInfo = () ->
    missingInfo = []
    if !Service.applicant.phone
      missingInfo.push("Phone")
    if !Service.applicant.email
      missingInfo.push("Email")
    if !Service.validMailingAddress()
      missingInfo.push("Address")
    return missingInfo

  Service.clearPhoneData = (type) ->
    if type == 'alternate'
      Service.applicant.noPhone = false
      Service.applicant.alternatePhone = null
      Service.applicant.alternatePhoneType = null
    else if type == 'phone'
      Service.applicant.additionalPhone = false
      Service.applicant.phone = null
      Service.applicant.phoneType = null

  Service.clearAlternateContactDetails = ->
    clearedData = { alternateContactType: 'None' }
    validated = Service.application.validatedForms.You
    delete validated['alternate-contact-name']
    delete validated['alternate-contact-phone-address']
    angular.copy(clearedData, Service.application.alternateContact)

  Service._nextId = ->
    if Service.householdMembers.length > 0
      max_id = _.maxBy(Service.householdMembers, 'id').id
    else
      max_id = Service.current_id
    Service.current_id = max_id + 1

  Service.addHouseholdMember = (householdMember) ->
    if !householdMember.id
      householdMember.id = Service._nextId()
      Service.householdMembers.push(angular.copy(householdMember))
    else
      # update existing householdMember
      angular.copy(householdMember, Service.householdMember)
    Service.householdMember = {}
    Service.invalidateHouseholdForm()

  Service.resetHouseholdmember = () ->
    Service.householdMember = {}

  Service.getHouseholdMember = (id) ->
    Service.householdMember = _.find(Service.householdMembers, {id: parseInt(id)})

  Service.cancelHouseholdMember = ->
    householdMembers = Service.householdMembers.filter (m) ->
      (m != Service.householdMember && m.id != Service.householdMember.id)
    # clear out preferences where this householdMember was selected
    full_name = "#{Service.householdMember.firstName} #{Service.householdMember.lastName}"
    # search through all xxx_household_member items in preferences matching the full name
    _.each Service.preferences, (v,k) ->
      if k.indexOf('_household_member') > 0 and v == full_name
        preference = k.split('_household_member')[0]
        Service.preferences[preference] = false
        Service.preferences[k] = null
        if Service.preferences["#{preference}_proof_option"]
          Service.preferences["#{preference}_proof_option"] = null
        # TODO: fix, these are no longer in this service
        #       but we can't include FileUploadService because it would be circular dependency
        # if Service.hasPreferenceFile("#{preference}_proof_file")
        #   Service.deletePreferenceFile("#{preference}_proof_file")

    # persist the changes to Service.householdMembers
    Service.householdMember = {}
    angular.copy(householdMembers, Service.householdMembers)
    Service.invalidateHouseholdForm()

  Service.checkHouseholdEligiblity = (listing) ->
    params =
      listing_id: listing.Id,
      eligibility:
        householdsize: Service.application.householdMembers.length + 1
        incomelevel: Service._calculateHouseholdIncome()
        childrenUnder6: Service._childrenUnder6()
    $http.post("/api/v1/short-form/validate-household", params).success((data, status, headers, config) ->
      data
    ).error( (data, status, headers, config) ->
      return
    )

  Service._childrenUnder6 = ->
    allMembers = angular.copy(Service.application.householdMembers)
    allMembers.push(Service.applicant)
    _.reduce(allMembers, (count, member) ->
      dob = "#{member.dob_year}-#{member.dob_month}-#{member.dob_day}"
      dob = moment(dob, 'YYYY-MM-DD')
      age = moment().diff(dob, 'years')
      count + (if age < 6 then 1 else 0)
    , 0)

  Service._calculateHouseholdIncome = () ->
    income = Service.application.householdIncome
    if income.incomeTimeframe == 'per_year'
      income.incomeTotal
    else if income.incomeTimeframe == 'per_month'
      income.incomeTotal * 12

  Service.resetGenderOptions = (user, option) ->
    toggle = !user.gender[option]
    user.gender = {}
    user.genderOther = null
    user.gender[option] = toggle

  ### Proof of Preferences ###
  Service.refreshLiveWorkPreferences = () ->
    Service._updatePreference("liveInSf", Service.liveInSfMembers())
    Service._updatePreference("workInSf", Service.workInSfMembers())

  Service.liveInSfMembers = () ->
    applicantLivesInSf = _.lowerCase(Service.applicant.home_address.city) == 'san francisco'
    liveInSfMembers = Service.application.householdMembers.filter (member) ->
      if member.hasSameAddressAsApplicant == 'No'
        _.lowerCase(member.home_address.city) == 'san francisco'
      else
        member.hasSameAddressAsApplicant == 'Yes' && applicantLivesInSf
    liveInSfMembers.unshift(Service.applicant) if applicantLivesInSf
    return liveInSfMembers

  Service.workInSfMembers = () ->
    workInSfMembers = Service.application.householdMembers.filter (member) ->
      member.workInSf == 'Yes'
    applicantWorksInSf = Service.applicant.workInSf == 'Yes'
    workInSfMembers.unshift(Service.applicant) if applicantWorksInSf
    return workInSfMembers

  Service.neighborhoodResidenceMembers = () ->
    # find all household members that either have their own address and match
    # -- OR -- same address as applicant, who also matches
    household = Service.application.householdMembers.filter (member) ->
      if (member.hasSameAddressAsApplicant == 'Yes')
        return Service.applicant.home_address.boundary_match
      else
        member.home_address && member.home_address.boundary_match
    # add applicant to the list if they match
    if Service.applicant.home_address.boundary_match
      household.unshift(Service.applicant)
    household

  Service.preferencesApplyForHousehold = ->
    liveInSfEligible = Service.liveInSfMembers().length > 0
    workInSfEligible = Service.workInSfMembers().length > 0
    neighborhoodResidenceEligible =  Service.neighborhoodResidenceMembers().length > 0
    displacedOrCertOfPreference = Service.preferences.displaced || Service.preferences.certOfPreference
    return (liveInSfEligible || workInSfEligible || neighborhoodResidenceEligible || displacedOrCertOfPreference)

  Service._updatePreference = (preference, eligibleMembers) ->
    # only need to update if nobody is eligible
    Service.preferences[preference] = false if _.isEmpty(eligibleMembers)

  Service.onExit = (e) ->
    e.returnValue = $translate.instant('T.ARE_YOU_SURE_YOU_WANT_TO_LEAVE')

  Service.isWelcomePage = (state) ->
    !!state.name.match(/short-form-welcome\./)

  Service.isShortFormPage = (state) ->
    !!state.name.match(/short-form-application\./)

  Service.checkFormState = (stateName, section) ->
    if Service.form.applicationForm
      stateName = stateName.replace(/dahlia.short-form-(welcome|application)\./, "")
      # special case for household-member-form
      return if stateName.match(/household-member-form/)
      Service.application.validatedForms[section.name][stateName] = Service.form.applicationForm.$valid

  Service.authorizedToProceed = (toState, fromState, toSection) ->
    return true unless toState && fromState
    return false unless Service.userCanAccessSection(toSection.name)
    # they're "jumping ahead" if they're not coming from a short form page or create-account
    # and they're trying to go to a short form section ahead of "name" (1st page)
    jumpAhead = Service.isShortFormPage(toState) &&
                !Service.isShortFormPage(fromState) &&
                toState.name != 'dahlia.short-form-application.name'
    return !jumpAhead

  Service.isLeavingShortForm = (toState, fromState) ->
    # leaving means we're going from short form to a non-short form page
    Service.isShortFormPage(fromState) && !Service.isShortFormPage(toState)

  Service.invalidateIncomeForm = ->
    Service.application.completedSections['Income'] = false
    Service.application.validatedForms['Income']['income'] = false

  Service.invalidateHouseholdForm = ->
    Service.application.completedSections['Household'] = false
    Service.application.completedSections['Status'] = false
    Service.application.completedSections['Income'] = false

  Service.preferenceFileIsLoading = (fileType) ->
    !! Service.preferences["#{fileType}_loading"]

  Service.uploadProof = (file, prefType) ->
    fileType = "#{prefType}_proof_file"
    if (!file)
      Service.preferences["#{fileType}_error"] = true
      return
    Service.preferences["#{fileType}_loading"] = true
    Upload.upload(
      url: '/api/v1/short-form/proof'
      method: 'POST'
      data:
        uploaded_file:
          file: file
          session_uid: Service.session_uid
          preference: prefType
    ).then( ((resp) ->
      Service.preferences["#{fileType}_loading"] = false
      Service.preferences["#{fileType}_error"] = false
      Service.preferences["#{fileType}"] = resp.data
    ), ((resp) ->
      # error handler
      Service.preferences["#{fileType}_loading"] = false
      Service.preferences["#{fileType}_error"] = true
    ))

  Service.submitApplication = (options={}) ->
    if options.draft
      Service.application.status = 'draft'
      Service.application.applicationSubmittedDate = moment().format('YYYY-MM-DD')
    else
      Service.application.status ='submitted'
      Service.application.applicationSubmittedDate = moment().format('YYYY-MM-DD')

    params =
      application: ShortFormDataService.formatApplication(Service.listing.Id, Service.application)
      uploaded_file:
        session_uid: Service.session_uid
    if options.attachToAccount
      params.temp_session_id = Service.session_uid

    if params.application.id
      # update
      id = params.application.id
      appSubmission = $http.put("/api/v1/short-form/application/#{id}", params)
    else
      # create
      appSubmission = $http.post('/api/v1/short-form/application', params)

    appSubmission.success((data, status, headers, config) ->
      if data.lotteryNumber
        Service.application.lotteryNumber = data.lotteryNumber
        Service.application.id = data.id
    ).error( (data, status, headers, config) ->
      alert("Error with submission: #{data.error}")
      return
    )

  Service.deleteApplication = (id) ->
    $http.delete("/api/v1/short-form/application/#{id}").success((data, status) ->
      true
    ).error( (data, status) ->
      alert("Error deleting application.")
      return
    )

  Service.getApplication = (id) ->
    $http.get("/api/v1/short-form/application/#{id}").success((data, status) ->
      Service.loadApplication(data)
    ).error((data, status) ->
      return
    )

  Service.getMyApplicationForListing = (listing_id) ->
    $http.get("/api/v1/short-form/listing-application/#{listing_id}").success((data, status) ->
      Service.loadApplication(data)
    ).error((data, status) ->
      return
    )

  Service.loadApplication = (data) ->
    formattedApp = {}
    if data.application && !_.isEmpty(data.application)
      files = data.files || []
      formattedApp = ShortFormDataService.reformatApplication(data.application, files)
    # reset user data with either the found application, or empty (no application found for this user + listing)
    Service.resetUserData(formattedApp)

  Service.checkSurveyComplete = ->
    app = Service.applicant
    responses = [
      _.some(app.gender),
      app.ethnicity,
      app.race,
      app.hiv,
      _.some(app.referral),
    ]
    Service.application.surveyComplete = _.every(responses)

  Service.importUserData = (loggedInUser) ->
    userData = _.pick loggedInUser, [
      'email', 'firstName', 'middleName', 'lastName', 'dob_day', 'dob_year', 'dob_month'
    ]
    _.merge Service.applicant, userData

  return Service

############################################################################################
######################################## CONFIG ############################################
############################################################################################

ShortFormApplicationService.$inject = [
  '$translate', '$http', 'Upload', 'uuid',
  'ListingService', 'ShortFormDataService'
]

angular
  .module('dahlia.services')
  .service('ShortFormApplicationService', ShortFormApplicationService)
