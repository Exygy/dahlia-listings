ShortFormApplicationService = ($localStorage, $translate, $http, Upload, uuid) ->
  Service = {}
  Service.applicationDefaults =
    applicant:
      home_address: { address1: null, city: null, state: null, zip: null }
      language: "English"
      phone: null
      mailing_address: { address1: null, city: null, state: null, zip: null }
    alternateContact:
      language: "English"
    householdMembers: []
    preferences:
      liveInSf: null
      workInSf: null
      neighborhoodResidence: null
      liveInSf_file: null
      workInSf_file: null
      neighborhoodResidence_file: null
      liveInSf_file_loading: null
      workInSf_file_loading: null
      neighborhoodResidence_file_loading: null
      liveInSf_file_error: null
      workInSf_file_error: null
      neighborhoodResidence_file_error: null
    householdIncome: { incomeTotal: 0, incomeTimeframe: 'per_year' }
    completedSections:
      Intro: false
      You: false
      Household: false
      Status: false
      Income: false

  Service.current_id = 0
  Service.session_uid = uuid.v4()
  Service.userkey = uuid.v4()

  Service.resetUserData = () ->
    # even though this looks commented out, it still has an effect in ERB land
    # <% if Rails.env.development? %> # -------------
    $localStorage.application ?= Service.applicationDefaults
    Service.application = $localStorage.application
    Service.application.preferences = angular.copy(Service.applicationDefaults.preferences)
    # <% else %> # -------------
    Service.application = angular.copy(Service.applicationDefaults)
    # <% end %> # -------------
    Service.applicant = Service.application.applicant
    Service.preferences = Service.application.preferences
    Service.alternateContact = Service.application.alternateContact
    Service.householdMember = {}
    Service.householdMembers = Service.application.householdMembers

  Service.resetUserData()

  Service.completeSection = (section) ->
    Service.application.completedSections[section] = true

  Service.userCanAccessSection = (section, state = null) ->
    # user can't access later sections yet when on the welcome page
    return false if state and Service.isWelcomePage(state)
    Service.application.completedSections ?= Service.applicationDefaults.completedSections
    completed = Service.application.completedSections
    switch section.name
      when 'You'
        completed.Intro
      when 'Household'
        completed.Intro &&
        completed.You
      when 'Status'
        completed.Intro &&
        completed.You &&
        completed.Household
      when 'Income'
        completed.Intro &&
        completed.You &&
        completed.Household &&
        completed.Status
      when 'Review'
        completed.Intro &&
        completed.You &&
        completed.Household &&
        completed.Status &&
        completed.Income
      else
        false

  Service.copyHomeToMailingAddress = () ->
    angular.copy(Service.applicant.home_address, Service.applicant.mailing_address)

  Service.validMailingAddress = () ->
    !! (Service.applicant.mailing_address.address1 &&
        Service.applicant.mailing_address.city &&
        Service.applicant.mailing_address.state &&
        Service.applicant.mailing_address.zip)

  Service.missingPrimaryContactInfo = () ->
    missingInfo = []
    if !Service.applicant.phone
      missingInfo.push("Phone")
    if !Service.applicant.email
      missingInfo.push("Email")
    if !Service.validMailingAddress()
      missingInfo.push("Address")
    return missingInfo

  Service.clearAlternatePhoneData = ->
    Service.applicant.noPhone = false
    if Service.applicant.additionalPhone
      Service.applicant.alternatePhone = null
      Service.applicant.alternatePhoneType = null

  Service.clearAlternateContactDetails = ->
    clearedData = { alternateContactType: 'None' }
    angular.copy(clearedData, Service.application.alternateContact)

  Service._nextId = ->
    if Service.householdMembers.length > 0
      max_id = _.maxBy(Service.householdMembers, 'id').id
    else
      max_id = Service.current_id
    Service.current_id = max_id + 1

  Service.addHouseholdMember = (householdMember) ->
    if !householdMember.id
      householdMember.id = Service._nextId()
      Service.householdMembers.push(angular.copy(householdMember))
    Service.householdMember = {}

  Service.resetHouseholdmember = () ->
    Service.householdMember = {}

  Service.getHouseholdMember = (id) ->
    Service.householdMember = _.find(Service.householdMembers, {id: parseInt(id)})

  Service.cancelHouseholdMember = ->
    householdMembers = Service.householdMembers.filter (m) ->
      (m != Service.householdMember && m.id != Service.householdMember.id)
    # clear out preferences where this householdMember was selected
    full_name = "#{Service.householdMember.firstName} #{Service.householdMember.lastName}"
    # search through all xxx_household_member items in preferences matching the full name
    _.each Service.preferences, (v,k) ->
      if k.indexOf('_household_member') > 0 and v == full_name
        preference = k.split('_household_member')[0]
        Service.preferences[preference] = false
        Service.preferences[k] = null
        if Service.preferences["#{preference}_proof_option"]
          Service.preferences["#{preference}_proof_option"] = null
        if Service.hasPreferenceFile("#{preference}_proof_file")
          Service.deletePreferenceFile("#{preference}_proof_file")

    # persist the changes to Service.householdMembers / $localStorage
    Service.householdMember = {}
    angular.copy(householdMembers, Service.householdMembers)

  Service.checkHouseholdEligiblity = (listing) ->
    params =
      listing_id: listing.Id,
      eligibility:
        householdsize: Service.application.householdMembers.length + 1
        incomelevel: Service._calculateHouseholdIncome()
    $http.post("/api/v1/short-form/validate-household", params).success((data, status, headers, config) ->
      data
    ).error( (data, status, headers, config) ->
      return
    )

  Service._calculateHouseholdIncome = () ->
    income = Service.application.householdIncome
    if income.incomeTimeframe == 'per_year'
      income.incomeTotal
    else if income.incomeTimeframe == 'per_month'
      income.incomeTotal * 12

  Service.resetGenderOptions = (user, option) ->
    toggle = !user.gender[option]
    user.gender = {}
    user.genderOther = null
    user.gender[option] = toggle

  ### Proof of Preferences ###

  Service.refreshLiveWorkPreferences = () ->
    Service._updatePreference("liveInSf", Service.liveInSfMembers())
    Service._updatePreference("workInSf", Service.workInSfMembers())

  Service.liveInSfMembers = () ->
    applicantLivesInSf = _.lowerCase(Service.applicant.home_address.city) == 'san francisco'
    liveInSfMembers = Service.application.householdMembers.filter (member) ->
      if member.hasSameAddressAsApplicant == "No"
        _.lowerCase(member.home_address.city) == 'san francisco'
      else
        member.hasSameAddressAsApplicant == "Yes" && applicantLivesInSf
    liveInSfMembers.push(Service.applicant) if applicantLivesInSf
    return liveInSfMembers

  Service.workInSfMembers = () ->
    workInSfMembers = Service.application.householdMembers.filter (member) ->
      member.workInSf == "Yes"
    applicantWorksInSf = Service.applicant.workInSf == "Yes"
    workInSfMembers.push(Service.applicant) if applicantWorksInSf
    return workInSfMembers

  Service.neighborhoodResidenceMembers = () ->
    # for now this just include everyone in the household, applicant + members
    household = angular.copy(Service.application.householdMembers)
    household.push(Service.applicant)
    return household

  Service._updatePreference = (preference, eligibleMembers) ->
    # only need to manually update if the preference hasn't been set yet
    return unless Service.preferences[preference] == null
    if eligibleMembers.length > 0
      Service.preferences[preference] = true
    else
      Service.preferences[preference] = false

  Service.onExit = (e) ->
    e.returnValue = $translate.instant('T.ARE_YOU_SURE_YOU_WANT_TO_LEAVE')

  Service.isWelcomePage = (state) ->
    !!state.name.match(/short-form-welcome/)

  Service.isLeavingShortForm = (toState, fromState) ->
    onShortForm = fromState.name.indexOf('short-form-application') >= 0
    leaving = toState.name.indexOf('short-form-application') == -1 &&
          toState.name.indexOf('create-account') == -1
    onShortForm && leaving

  Service.hasPreferenceFile = (fileType) ->
    Service.preferences[fileType] && !Service.preferenceFileIsLoading(fileType)

  Service.deletePreferenceFile = (prefType) ->
    fileType = "#{prefType}_proof_file"
    params =
      uploaded_file:
        session_uid: Service.session_uid
        userkey: Service.userkey
        preference: prefType
    $http.delete('/api/v1/short-form/proof', {
      data: params,
      headers: {
        'Content-Type': 'application/json'
      },
    }).success((data, status, headers, config) ->
      Service.preferences[fileType] = null
      # console.log(data)
    ).error( (data, status, headers, config) ->
      # console.warn('error')
      return
    )

  Service.preferenceFileError = (fileType) ->
    !! Service.preferences["#{fileType}_error"]

  Service.preferenceFileIsLoading = (fileType) ->
    !! Service.preferences["#{fileType}_loading"]

  Service.uploadProof = (file, prefType) ->
    fileType = "#{prefType}_proof_file"
    if (!file)
      Service.preferences["#{fileType}_error"] = true
      return
    Service.preferences["#{fileType}_loading"] = true
    Upload.upload(
      url: '/api/v1/short-form/proof'
      method: 'POST'
      data:
        uploaded_file:
          file: file
          session_uid: Service.session_uid
          userkey: Service.userkey
          preference: prefType
    ).then( ((resp) ->
      Service.preferences["#{fileType}_loading"] = false
      Service.preferences["#{fileType}_error"] = false
      Service.preferences["#{fileType}"] = resp.data
    ), ((resp) ->
      # error handler
      Service.preferences["#{fileType}_loading"] = false
      Service.preferences["#{fileType}_error"] = true
    ))

  return Service

############################################################################################
######################################## CONFIG ############################################
############################################################################################

ShortFormApplicationService.$inject = [
  '$localStorage', '$translate', '$http', 'Upload', 'uuid'
]

angular
  .module('dahlia.services')
  .service('ShortFormApplicationService', ShortFormApplicationService)
